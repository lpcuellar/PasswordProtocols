# Universidad del Valle de Guatemala
# Cifrado de informaci√≥n 2020 2
# Grupo 7
# Implementation One Time Password.py

#We import pyotp library to help us build OTPs
import pyotp
import time

#Example taken from https://wizardforcel.gitbooks.io/practical-cryptography-for-developers-book/content/more-cryptographic-concepts/one-time-passwords-otp-example.html

# OneTimePassword need a presharedKey between a server and a device
# This is to make it secure for the One Time Password being made each time you will need a device that you have and is secure, and also your password
# This way we guarantee the security of the person when logging in
# Benefits
# -It helps against replay attacks
# -It helps that if someone gets to know your password, they still don't have access because they would need your physical device.
# -It also ensures your session cannot be intercepted


print("This is an example of OTP.")
print("We will make use of Google Authenticator to make it work.")

#Simulate the server side
#First we need to configure the server side
print("Server Side")
#We will generate a key that only the server will know and your physical device will get only the first time, you create this type of login
# If you want to generate a new one each time
# sharedSecretKey = pyotp.random_base32()
sharedSecretKey = 'CQ3IDKORRGYVMGKF'
print('Shared Key Secret for server and device:', sharedSecretKey)

# We also use Google Authenticator OpenSource OTP model which produce a URI for an exchange, the secret and additional client-server details. 
# It includes the shared secret, the client's username, and the issuer's name.
# This is for the exchange of the secretKey between server and client.
username = "username@gmail.com"
issuersname = "Safe OTP"
secureURI = pyotp.totp.TOTP(sharedSecretKey).provisioning_uri(
    username,
    issuer_name=issuersname)
print(secureURI)


input("Now wait to scan your URI on your phone or enter it on the google authenticator app manually. ")


# Now on the client side
# They need to store and exchange the secreteSharedKey with the uri
print("Client Side")

# Now they can both generate a OneTimePassword, using time and the sharedSecretKey
# As you can see it will change depending on the time
print('Shared Key Secret on client side:', sharedSecretKey)
#Example of totp generated
totp = pyotp.TOTP(sharedSecretKey)




#Now we can try to validate it as if we were the application they are trying to login
#To make the validation the OTP generated in the server has to match with the OTP generated in the client side.
# This way the OTP is generated each time they need access and depends on the time, and also it only pass if the password also matches and you have the sharedKey.
tokenUser=input("Please enter your token generated on your device: ")
tokenOTP = totp.now()
print('OTP code generated by server:', tokenOTP)
otpValid = totp.verify(tokenUser)
print("OTP Valid",otpValid)
print("OTP Valid",tokenOTP==tokenUser)




